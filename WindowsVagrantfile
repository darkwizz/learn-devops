# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  
  ## what the default box for Windows (VirtualBox) should have:
  ## https://www.vagrantup.com/docs/boxes/base.html#windows-boxes
  ## https://softwaretester.info/create-windows-10-vagrant-base-box/
  ## - Turn off UAC
  ## - Disable complex passwords (wasn't applicable in my case)
  ## - Disable "Shutdown Tracker" (wasn't applicable in my case)
  ## - Disable "Server Manager" starting at login (for non-Core) (wasn't applicable in my case)
  ## - reg add HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /d 0 /t REG_DWORD /f /reg:64
  ## 
  ## - a user with username "vagrant" and password "vagrant"
  ## - winrm quickconfig -q
  ## - winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="512"}'
  ## - winrm set winrm/config '@{MaxTimeoutms="1800000"}'
  ## - winrm set winrm/config/service '@{AllowUnencrypted="true"}'
  ## - winrm set winrm/config/service/auth '@{Basic="true"}'
  ## - winrm set winrm/config/listener?Address=*+Transport=HTTP '@{Port="5985"}'
  ## - sc config WinRM start= auto
  ##
  ## Then get the VM's UUID:
  ## $> VBoxManage list vms
  ## 
  ## Package the VM into .box:
  ## $> vagrant package --base {copied_UUID} --output {path_to_result_box_file}
  config.vm.box = "win10x64-WinRM"

  config.vm.base_mac = "auto"


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # for my version (2.2.7) this port is forwarded by default for "winrm" communicator
  # config.vm.network "forwarded_port", guest: 5985, host: 5987, id: "winrm", auto_correct: true
  config.vm.network "forwarded_port", guest: 3389, host: 3389  # is needed for RDP
  config.vm.communicator = "winrm"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "./data", "/vagrant_data", type: "smb"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true

    # vb.customize ["modifyvm", :id, "--ioapic", "on"]
    # vb.customize ["modifyvm", :id, "--cpus", "2"]
    vb.cpus = 1

    # vb.customize ["modifyvm", :id, "--hwvirtex", "off"]
    # vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
  
    # Customize the amount of memory on the VM:
    # vb.memory = "1536"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  config.vm.provision "shell", inline: "echo hello"
end
